Semana #4
17:49 31/10/2022
valores inmutables
las cosas no deberian cambiar

val cedula = "1108765321"
//error de reasignacion de valores
cedula = "1108765323"
val cedula = "xxxx2"
val cedula = "xxxx3"
car cedula = "xxxx3"


higher order functions

f(x)= -x**2 + 8x -12
(x : Double)  => -Math.pow(x, 2) + 8 + x - 12
val f1 = (x: Double)  => -Math.pow(x,2) + 8 * x -12
f1(12)
//val f1Val = f1(12)
//f1(12) * 9 / 8 + 3
//((x : Double) => -Math.pow(x, 2) + 8 * x- 12)(12)
//alt 62 >

I =   b∫a f(x)dx 
ANALISIS DE f(x)
paranetros
. informacion que recibe: real = Double → Double 
que devuelve real

// (x : String) => Int // no puede entrar a la funcion
// (a: Char, b : String) => Double**

def integracion(a :Int, b: Int, f : Double => Double)={}

Metodo Simpsom 1/3
I = b∫a f(x)dx I = b∫a f(x)dx = (b-a) f(a) + 4f(x)+f(b)/6
def integracion(a: Int, b : Int,f : Double => Double) = {
val intermedio = ((a+b)) / 2.0)
val fa = f(a);
val fi = f(intermedio)
val fb = f(b)
(b-a) * (fa + 4 * fi + fb) / 6}

Una funcion que devuelve una funcion

calculadora
def select(option : Char) : (Int, Int) =>  Double = { 
option match {
case '+' => (a: Int, b : Int) => a + b
case '-' => (a: Int, b : Int) => a - b
case '*' => (a: Int, b : Int) => a * b
case '/' => (a: Int, b : Int) => a / b.toDouble
case - => (a: Int, b : Int) => 0 / (a+b)
  }
}
// alt 39 '
select('+')(2,1)
val operation = select('+')
operation(2,1)

Obtener datos de secuencia
dada una lista de pares (5,6,7,8,9) cuantos son pares
[5 6 7 8 9]
 % % % %  %
 2 2 2 2  2
r=1r=01 0 1
si r = 1 -> 0
si r = 0 -> 1
[0 1 0 1 0] = 2
CountEven(L) = sumatoria isEven(k)
                  ↓
            k distinto de L

val isEven = ( k : Int) => if (k % 2 == 0) 1 else 0
def isEven(k : Int): Int = (k % 2) match {
 case 0 => 1
 case_  => 0
}

list(1, 2, 3)
sum
list(1, 2, 3).sum
map
list(1,2,3).map(x => x * x + 100 * x)
res1: list[Int] = List(101,204,309)

def fun1(x: Int) : Int = x * x + 100 * x
List(1,2,3).map( func1)
res3: List[Int] = List(101,204,309)
List(1,2,3) map func1 //dottles infix

val nums = List(1, 2, 3)
nums.cap(x => x + 1)


def add1(a :Int) : Int = a + 1
nums.map(add1)
nums.map(x => add1(x))
nums.map(add1(_))


val_sumaDos = (a: Int, b: Int) => a + b
//nums.map(sumaDos)error
nums.cap(sumaDos(x, x))
//nums.cap(sumaDos(_, _))error

def countEvent(s : List[Int]): Int {
 def isEven(k: Int): Int = ()
